<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Shuhai's Blog</title><link>https://shuhai65.github.io/posts/</link><description>Recent content in Posts on Shuhai's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Mar 2022 18:08:29 +0000</lastBuildDate><atom:link href="https://shuhai65.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Win10使用Geth客户端搭建以太坊私有链、连接可视化钱包及挖矿</title><link>https://shuhai65.github.io/posts/win10%E4%BD%BF%E7%94%A8geth%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE%E8%BF%9E%E6%8E%A5%E5%8F%AF%E8%A7%86%E5%8C%96%E9%92%B1%E5%8C%85%E5%8F%8A%E6%8C%96%E7%9F%BF/</link><pubDate>Wed, 16 Mar 2022 18:08:29 +0000</pubDate><guid>https://shuhai65.github.io/posts/win10%E4%BD%BF%E7%94%A8geth%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE%E8%BF%9E%E6%8E%A5%E5%8F%AF%E8%A7%86%E5%8C%96%E9%92%B1%E5%8C%85%E5%8F%8A%E6%8C%96%E7%9F%BF/</guid><description>下载并安装Geth客户端 下载地址：https://geth.ethereum.org/downloads/*
下载最新版本的geth(win10版本Stable releases)(选择自己电脑对应的版本) 选第3个，下载并安装(安装时选择一个自己方便操作的路径即可)： 下载完成后打开文件夹：
验证是否安装成功：
打开cmd,输入以下指令(查看帮助文档)：geth -help
出现以下内容即为安装成功
至此以太坊客户端已经安装完毕
测试geth同步主网络(配置私链的话这步不做也可)
直接打开geth.exe
geth会自动运行同步，在一开始的提示中也有说明区块的存储路径在哪里
我的路径是：C:\Users\Edward\AppData\Roaming\Ethereum (一般为管理员账户路径里)
注意：要查看AppData,需要在查看里勾选查看隐藏的项目 创世区块配置文件 (开始搭建私链:注意关闭正在同步主网的geth) 新建创世区块文件
在geth安装目录下新建*genesis.json*(此为文件名)文件，输入以下内容（并保存）：
{ &amp;#34;nonce&amp;#34;: &amp;#34;0x0000000000000042&amp;#34;, &amp;#34;difficulty&amp;#34;: &amp;#34;0x4&amp;#34;, &amp;#34;mixhash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;, &amp;#34;coinbase&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000&amp;#34;, &amp;#34;timestamp&amp;#34;: &amp;#34;0x00&amp;#34;, &amp;#34;parentHash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;, &amp;#34;gasLimit&amp;#34;: &amp;#34;0xffffffffffffff&amp;#34;, &amp;#34;alloc&amp;#34;: {}, &amp;#34;config&amp;#34;: { &amp;#34;chainId&amp;#34;: 666, &amp;#34;homesteadBlock&amp;#34;: 0, &amp;#34;eip150Block&amp;#34;: 0, &amp;#34;eip150Hash&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;, &amp;#34;eip155Block&amp;#34;: 0, &amp;#34;eip158Block&amp;#34;: 0, &amp;#34;byzantiumBlock&amp;#34;: 0, &amp;#34;constantinopleBlock&amp;#34;: 0, &amp;#34;petersburgBlock&amp;#34;: 0, &amp;#34;istanbulBlock&amp;#34;: 0, &amp;#34;ethash&amp;#34;: {} } } 重要参数说明
参数名 描述 chainID 指定了独立的区块链网络 ID。网络 ID 在连接到其他节点的时候会用到，以太坊公网的网络 ID 是 1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络 ID。不同 ID 网络的节点无法相互连接 homesteadBlock 取值为0表示正在使用homesteadBlock版本。以太坊的发展分成了四个阶段：（每个阶段进步到下一个阶段都是通过硬分叉的方式实现的）1.</description></item><item><title>平衡二叉树（AVL）的实现</title><link>https://shuhai65.github.io/posts/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91avl%E7%9A%84%E5%AE%9E%E7%8E%B0/</link><pubDate>Sun, 16 Jan 2022 22:43:48 +0000</pubDate><guid>https://shuhai65.github.io/posts/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91avl%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid><description>平衡二叉树概念 平衡二叉排序树（Balanced Binary Tree），因由前苏联数学家Adelson-Velskii 和 Landis于1962年首先提出的，所以又称为AVL树。
平衡二叉树是一种特殊的二叉排序树，理解平衡二叉树首先要理解什么是二叉排序树。 如果已经了解二叉排序树可以直接看下面平衡二叉树内容。
二叉排序树（Binary Sort Tree） 所谓二叉排序树(BST)即： （1）若该树的左子树不为空，那么左子树所有结点的值均小于其根结点的值。 （2）若该树的右子树不为空，那么右子树所有结点的值均大于其根结点的值。 （3）该树的左右子树也均为二叉排序树。 依此定义，我们可以通过比较根结点的值一层层地定位到所要查找的值。
例：如下图是一棵二叉排序树 比如我们要查找7，那么先从根结点开始比较，8&amp;gt;7查找左子树 &amp;mdash;-&amp;gt; 3&amp;lt;7查找右子树 &amp;mdash;-&amp;gt; 6&amp;gt;7查找右子树 &amp;mdash;-&amp;gt; 最后7=7，找到了7。 这种查找算法与折半查找相似，也是逐步缩小搜索范围。 若中序遍历上图，则可以得到一个按数值大小排序的递增序列：1，3，4，6，7，8，10，13，15。
二叉排序树的储存结构 typedef struct BSTNode { int data=0;//数据项 struct BSTNode *lchild=NULL,*rchild=NULL;//左右子树 }BSTNode,*BSTree. 二叉排序树的查找算法（递归查找） BSTree T 为二叉树根节点 ，int e 为查找的关键字。时间复制度为O(log2 n)。
int searchTree(BSTree T,int e)//在二叉树中查找给定关键字(函数返回值为成功1,失败0) { if (T==NULL)//无法查找到给定关键字 { return 0; }else if (e==T-&amp;gt;data)//查找到关键字 { return 1; }else if (e&amp;lt;T-&amp;gt;data)//小于根结点，向左子树查找 { return searchTree(T-&amp;gt;lchild,e); }else if(e&amp;gt;T-&amp;gt;data)//大于根结点，向右子树查找 { return searchTree(T-&amp;gt;rchild,e); } } 二叉排序树的创建及插入（递归） 二叉排序树的插入算法基本过程也是查找，时间复制度也为O(log2 n)。 void InsertBST(BSTree &amp;amp;T,int e)//插入节点，根据节点值的大小插入 {//当二叉排序树中不存在关键字等于e的结点时，查找结束，插入结点 if (!</description></item><item><title>About</title><link>https://shuhai65.github.io/posts/about/</link><pubDate>Sat, 01 Jan 2022 18:08:29 +0000</pubDate><guid>https://shuhai65.github.io/posts/about/</guid><description>🤠樹海(shuhai) 本科软件工程在读 Github: https://github.com/shuhai65 Twitter: https://twitter.com/stacks1iver cnblogs: https://www.cnblogs.com/shuhai165 CSDN: https://blog.csdn.net/Tree_sea 好朋友们 Xicom : https://txicom.github.io/</description></item></channel></rss>