<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Shuhai&#39;s Blog</title>
    <link>https://shuhai65.github.io/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Shuhai&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jan 2022 22:43:48 +0000</lastBuildDate><atom:link href="https://shuhai65.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>平衡二叉树（AVL）的实现</title>
      <link>https://shuhai65.github.io/posts/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91avl%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 16 Jan 2022 22:43:48 +0000</pubDate>
      
      <guid>https://shuhai65.github.io/posts/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91avl%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>平衡二叉树概念 平衡二叉排序树（Balanced Binary Tree），因由前苏联数学家Adelson-Velskii 和 Landis于1962年首先提出的，所以又称为AVL树。
平衡二叉树是一种特殊的二叉排序树，理解平衡二叉树首先要理解什么是二叉排序树。 如果已经了解二叉排序树可以直接看下面平衡二叉树内容。
二叉排序树（Binary Sort Tree） 所谓二叉排序树(BST)即： （1）若该树的左子树不为空，那么左子树所有结点的值均小于其根结点的值。 （2）若该树的右子树不为空，那么右子树所有结点的值均大于其根结点的值。 （3）该树的左右子树也均为二叉排序树。 依此定义，我们可以通过比较根结点的值一层层地定位到所要查找的值。
例：如下图是一棵二叉排序树 比如我们要查找7，那么先从根结点开始比较，8&amp;gt;7查找左子树 &amp;mdash;-&amp;gt; 3&amp;lt;7查找右子树 &amp;mdash;-&amp;gt; 6&amp;gt;7查找右子树 &amp;mdash;-&amp;gt; 最后7=7，找到了7。 这种查找算法与折半查找相似，也是逐步缩小搜索范围。 若中序遍历上图，则可以得到一个按数值大小排序的递增序列：1，3，4，6，7，8，10，13，15。
二叉排序树的储存结构 typedef struct BSTNode { int data=0;//数据项 struct BSTNode *lchild=NULL,*rchild=NULL;//左右子树 }BSTNode,*BSTree. 二叉排序树的查找算法（递归查找） BSTree T 为二叉树根节点 ，int e 为查找的关键字。时间复制度为O(log2 n)。
int searchTree(BSTree T,int e)//在二叉树中查找给定关键字(函数返回值为成功1,失败0) { if (T==NULL)//无法查找到给定关键字 { return 0; }else if (e==T-&amp;gt;data)//查找到关键字 { return 1; }else if (e&amp;lt;T-&amp;gt;data)//小于根结点，向左子树查找 { return searchTree(T-&amp;gt;lchild,e); }else if(e&amp;gt;T-&amp;gt;data)//大于根结点，向右子树查找 { return searchTree(T-&amp;gt;rchild,e); } } 二叉排序树的创建及插入（递归） 二叉排序树的插入算法基本过程也是查找，时间复制度也为O(log2 n)。 void InsertBST(BSTree &amp;amp;T,int e)//插入节点，根据节点值的大小插入 {//当二叉排序树中不存在关键字等于e的结点时，查找结束，插入结点 if (!</description>
    </item>
    
  </channel>
</rss>
